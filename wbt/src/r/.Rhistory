year.start = 2010
month.start = 1
year.end = 2019
month.end = 12
# Filter dates here
wbt$dates %<>%
as.Date()
wbt %<>%
subset(dates.year > year.start &&
dates.year < year.end &&
dates.month > month.start &&
dates.month < month.end)
source("libs.R") # Load Libraries
source("reader.R") # Read Source
source("preview.R") # Grab preview functions
source("modelling.R") # This will grab all the modelling functions
year.start = 2010
month.start = 1
year.end = 2019
month.end = 12
# Filter dates here
wbt$dates %<>%
as.Date()
wbt %<>%
subset(dates.year > year.start &
dates.year < year.end &
dates.month > month.start &
dates.month < month.end)
View(wbt)
wbt <- wbt.normalize(wbt)
source("libs.R") # Load Libraries
source("reader.R") # Read Source
source("preview.R") # Grab preview functions
source("modelling.R") # This will grab all the modelling functions
wbt <- wbt.normalize(wbt)
source("plotting.R")
View(wbt)
year.start = 2010
month.start = 1
year.end = 2019
month.end = 12
# Filter dates here
wbt$dates %<>%
as.Date()
wbt %<>%
subset(dates.year > year.start &
dates.year < year.end &
dates.month > month.start &
dates.month < month.end)
source("plotting.R")
wbt.plot.delta(wbt,year.start = 2017,filename = "2017.png")
wbt.plot.delta(wbt,year.start = 2017,filename = "2017.png")
source("plotting.R")
wbt.plot.delta(wbt,year.start = 2017,filename = "2017.png")
wbt.plot.delta(wbt,year.start = 2017,filename = "2017.png")
source("plotting.R")
wbt.plot.delta(wbt,year.start = 2017,filename = "2017.png")
source("plotting.R")
wbt.plot.delta(wbt,year.start = 2017,filename = "2017.png")
source("plotting.R")
wbt.plot.delta(wbt,year.start = 2017,filename = "2017.png")
source("plotting.R")
wbt.plot.delta(wbt,year.start = 2017,filename = "2017.png")
source("plotting.R")
wbt.plot.delta(wbt,year.start = 2017,filename = "2017.png")
source("plotting.R")
wbt.plot.delta(wbt,year.start = 2017,filename = "2017.png")
source("plotting.R")
wbt.plot.delta(wbt,year.start = 2017,filename = "2017.png")
source("plotting.R")
wbt.plot.delta(wbt,year.start = 2017,filename = "2017.png")
"
wbt.plot.delta(wbt,year.start = 2017,filename = "2017.png")
wbt.plot.delta(wbt,year.start = 2017,filename = "2017.png")
source("plotting.R")
wbt.plot.delta(wbt,year.start = 2017,filename = "2017.png")
source("plotting.R")
wbt.plot.delta(wbt,year.start = 2017,filename = "2017.png")
source("plotting.R")
wbt.plot.delta(wbt,year.start = 2017,filename = "2017.png")
source("plotting.R")
wbt.plot.delta(wbt, year.start = 2017,filename = "2017.png")
source("plotting.R")
wbt.plot.delta(wbt,
year.start = 2017,
filename = "2017.png",
smooth = 0.5)
source("plotting.R")
wbt.plot.delta(wbt,
year.start = 2017,
filename = "2017.png",
smooth = 0.5)
source("plotting.R")
wbt.plot.delta(wbt,
year.start = 2017,
filename = "2017.png",
smooth = 0.5)
source("plotting.R")
wbt.plot.delta(wbt,
year.start = 2017,
filename = "2017.png",
smooth = 0.5)
wbt.plot.delta(wbt,
year.start = 2017,
filename = "2017.png",
smooth = 0.6)
wbt.plot.delta(wbt,
year.start = 2017,
filename = "2017.png",
smooth = 0.4)
wbt.plot.delta(wbt,
year.start = 2017,
filename = "2017.png",
smooth = 0.5)
source("plotting.R")
wbt.plot.delta(wbt,
year.start = 2017,
filename = "2017.png",
smooth = 0.5)
source("reader.R") # Read Source
View(wbt)
# This creates a loess model of the data
wbt.normalize <- function(df) {
# Aggregate by Month
df <-
aggregate(cbind(values, dates) ~ dates.year + dates.month,
data = df,
mean)
# Create a local regression model
pred <- predict(
loess(values ~ dates,
data = df,
span = 0.5)
)
# CBind with original df
df <- cbind(df, pred)
# Grab delta
df$delta = df$values - df$pred
return(df)
}
source("modelling.R") # This will grab all the modelling functions
wbt <- wbt.normalize(wbt)
View(wbt)
wbt.plot.delta(wbt,
year.start = 2017,
filename = "2017.png",
smooth = 0.5)
wbt.plot.loess.comp(wbt)
wbt.plot.delta(wbt,
year.start = 2015,
filename = "2015.png",
smooth = 0.5)
wbt.plot.delta(wbt,
year.start = 2015,
filename = "2015.png",
smooth = 0.3)
# Generate for 2017
wbt.plot.delta(wbt,
year.start = 2017,
filename = "2017.png",
smooth = 0.3)
# Generate for 2017
wbt.plot.delta(wbt,
year.start = 2017,
filename = "2017.png",
smooth = 0.5)
wbt.plot.loess.comp(wbt)
source("plotting.R")
wbt.plot.loess.comp(wbt)
source("plotting.R")
# Generate for Everything
wbt.plot.delta(wbt,
filename = "period.png",
smooth = 0.3)
source("plotting.R")
# Generate for Everything
wbt.plot.delta(wbt,
filename = "period.png",
smooth = 0.3)
source("plotting.R")
# Generate for Everything
wbt.plot.delta(wbt,
filename = "period.png",
smooth = 0.3)
# Generate for 2015
wbt.plot.delta(wbt,
year.start = 2015,
filename = "2015.png",
smooth = 0.3)
# Generate for 2017
wbt.plot.delta(wbt,
year.start = 2017,
filename = "2017.png",
smooth = 0.5)
source("plotting.R")
# Generate for Everything
wbt.plot.delta(wbt,
filename = "period.png",
smooth = 0.3,
scaling = 2)
# Generate for Everything
wbt.plot.delta(wbt,
filename = "period.png",
smooth = 0.1,
scaling = 1.2)
# Generate for Everything
wbt.plot.delta(wbt,
filename = "period.png",
smooth = 0.02,
scaling = 1.2)
# Generate for Everything
wbt.plot.delta(wbt,
filename = "period.png",
smooth = 0.4,
scaling = 1.2)
# Generate for Everything
wbt.plot.delta(wbt,
filename = "period.png",
smooth = 0.1,
scaling = 1.2)
# Generate for Everything
wbt.plot.delta(wbt,
filename = "period.png",
smooth = 0.05,
scaling = 1.2)
# Generate for Everything
wbt.plot.delta(wbt,
filename = "period.png",
smooth = 0.025,
scaling = 1.2)
# Generate for Everything
wbt.plot.delta(wbt,
filename = "period.png",
smooth = 0.04,
scaling = 1.2)
# Generate for 2015
wbt.plot.delta(wbt,
year.start = 2015,
filename = "2015.png",
smooth = 0.3,
scaling = 8)
# Generate for 2017
wbt.plot.delta(wbt,
year.start = 2017,
filename = "2017.png",
smooth = 0.5,
scaling = 8)
source("plotting.R")
# Generate for Everything
wbt.plot.delta(wbt,
filename = "period.png",
smooth = 0.04,
scaling = 1.2,
smoothing = F)
# Generate for Everything
wbt.plot.delta(wbt,
filename = "period.png",
smooth = 0.04,
scaling = 1.2,
smoothing = F)
source("plotting.R")
# Generate for Everything
wbt.plot.delta(wbt,
filename = "period.png",
smooth = 0.04,
scaling = 1.2,
smoothing = F)
source("plotting.R")
# Generate for Everything
wbt.plot.delta(wbt,
filename = "period.png",
smooth = 0.04,
scaling = 1.2,
smoothing = F)
source("libs.R") # Load Libraries
source("reader.R") # Read Source
source("preview.R") # Grab preview functions
source("modelling.R") # This will grab all the modelling functions
source("plotting.R")
source("libs.R") # Load Libraries
source("reader.R") # Read Source
source("preview.R") # Grab preview functions
source("modelling.R") # This will grab all the modelling functions
source("plotting.R")
View(wbt)
wbt <- wbt.normalize(wbt)
summary(wbt$delta)
save.image('workspace.RData')
knitr::opts_chunk$set(echo = TRUE)
load("../workspace.RData")
summary(wbt$delta)
round(summary(wbt$delta),2)
spectrum(wbt$delta)
spectrum(sort(wbt$delta))
wbt <- wbt[order(wbt$delta),]
View(wbt)
wbt <- wbt[order(wbt$dates),]
spectrum(wbt$delta)
?spectrum
sde <- spectrum(wbt$delta)
per <- 1/sde$freq[sde$spec == max(sde$spec)]
reslm <- lm(wbt$delta ~ sin(2*pi/per*wbt$dates)+cos(2*pi/per*wbt$dates))
reslm <- lm(wbt$delta ~ sin(2*pi/per*wbt$dates)+cos(2*pi/per*wbt$dates))
rg <- diff(range(wbt$delta))
plot(wbt$delta~wbt$dates,
ylim=c(min(wbt$delta)-0.1*rg,
max(wbt$delta)+0.1*rg))
lines(fitted(reslm)~wbt$delta,col=4,lty=2)
lines(fitted(reslm)~wbt$delta,col=4,lty=2)
reslm
wbt <- wbt[order(wbt$dates),]
sde <- spectrum(wbt$delta)
per <- 1/sde$freq[sde$spec == max(sde$spec)]
reslm <- lm(wbt$delta ~ sin(2*pi/per*wbt$dates)+cos(2*pi/per*wbt$dates))
reslm.pred <- data.frame(val = predict(reslm, wbt),
dates = wbt$dates)
ggplot(wbt) +
aes(x = dates,
y = delta) +
geom_point() +
geom_line(data = reslm.pred, aes(x = val,
y = dates))
View(reslm.pred)
ggplot(wbt) +
aes(x = dates,
y = delta) +
geom_point() +
geom_line(data = reslm.pred, aes(x = dates,
y = val))
?norm
?normalize
??normalize
reslm.pred <- data.frame(val = predict(reslm, wbt)*50,
dates = wbt$dates)
ggplot(wbt) +
aes(x = dates,
y = delta) +
geom_point() +
geom_line(data = reslm.pred, aes(x = dates,
y = val))
reslm <- lm(wbt$delta ~ pi + sin(2*pi/per*wbt$dates))
reslm.pred <- data.frame(val = predict(reslm, wbt)*50,
dates = wbt$dates)
ggplot(wbt) +
aes(x = dates,
y = delta) +
geom_point() +
geom_line(data = reslm.pred, aes(x = dates,
y = val))
reslm <- lm(wbt$delta ~ sin(2*pi/per*dates))
reslm <- lm(wbt$delta ~ sin(2*pi/(per*30)*wbt$dates))
reslm.pred <- data.frame(val = predict(reslm, wbt)*50,
dates = wbt$dates)
ggplot(wbt) +
aes(x = dates,
y = delta) +
geom_point() +
geom_line(data = reslm.pred, aes(x = dates,
y = val))
reslm.pred <- data.frame(val = predict(reslm, wbt)*500,
dates = wbt$dates)
ggplot(wbt) +
aes(x = dates,
y = delta) +
geom_point() +
geom_line(data = reslm.pred, aes(x = dates,
y = val))
reslm.pred <- data.frame(val = predict(reslm, wbt)*50,
dates = wbt$dates)
ggplot(wbt) +
aes(x = dates,
y = delta) +
geom_point() +
geom_line(data = reslm.pred, aes(x = dates,
y = val))
reslm.pred <- data.frame(val = predict(fitted(reslm), wbt),
dates = wbt$dates)
reslm <- fitted(lm(wbt$delta ~ sin(2*pi/(per*30)*wbt$dates)))
reslm.pred <- data.frame(val = predict(reslm, wbt),
dates = wbt$dates)
ggplot(wbt) +
aes(x = dates,
y = delta) +
geom_point() +
geom_line(data = reslm.pred, aes(x = dates,
y = val))
reslm.pred <- data.frame(val = fitted(predict(reslm, wbt)),
dates = wbt$dates)
ggplot(wbt) +
aes(x = dates,
y = delta) +
geom_point() +
geom_line(data = reslm.pred, aes(x = dates,
y = val))
reslm.pred <- data.frame(val = predict(fitted(reslm), wbt),
dates = wbt$dates)
reslm.pred <- data.frame(val = predict(fitted(reslm), wbt),
dates = wbt$dates)
reslm <- lm(wbt$delta ~ sin(2*pi/366*wbt$dates))
reslm.pred <- data.frame(val = predict(reslm, wbt),
dates = wbt$dates)
ggplot(wbt) +
aes(x = dates,
y = delta) +
geom_point() +
geom_line(data = reslm.pred, aes(x = dates,
y = val))
reslm <- lm(wbt$delta ~ sin(2*pi/200*wbt$dates))
reslm.pred <- data.frame(val = predict(reslm, wbt),
dates = wbt$dates)
ggplot(wbt) +
aes(x = dates,
y = delta) +
geom_point() +
geom_line(data = reslm.pred, aes(x = dates,
y = val))
reslm <- lm(wbt$delta ~ sin(2*pi/365*wbt$dates))
reslm.pred <- data.frame(val = predict(reslm, wbt),
dates = wbt$dates)
ggplot(wbt) +
aes(x = dates,
y = delta) +
geom_point() +
geom_line(data = reslm.pred, aes(x = dates,
y = val))
reslm <- lm(wbt$delta ~ sin(2*pi/(per*30)*wbt$dates))
reslm.pred <- data.frame(val = predict(reslm, wbt),
dates = wbt$dates)
ggplot(wbt) +
aes(x = dates,
y = delta) +
geom_point() +
geom_line(data = reslm.pred, aes(x = dates,
y = val))
reslm <- lm(wbt$delta ~ sin(2*pi/366*wbt$dates))
reslm.pred <- data.frame(val = predict(reslm, wbt),
dates = wbt$dates)
ggplot(wbt) +
aes(x = dates,
y = delta) +
geom_point() +
geom_line(data = reslm.pred, aes(x = dates,
y = val))
reslm <- lm(wbt$delta ~ pi + sin(2*pi/366*wbt$dates))
reslm <- lm(wbt$delta ~  + sin(pi + 2*pi/366*wbt$dates))
reslm.pred <- data.frame(val = predict(reslm, wbt),
dates = wbt$dates)
ggplot(wbt) +
aes(x = dates,
y = delta) +
geom_point() +
geom_line(data = reslm.pred, aes(x = dates,
y = val))
reslm <- lm(wbt$delta ~  + sin(pi/366*wbt$dates))
reslm.pred <- data.frame(val = predict(reslm, wbt),
dates = wbt$dates)
ggplot(wbt) +
aes(x = dates,
y = delta) +
geom_point() +
geom_line(data = reslm.pred, aes(x = dates,
y = val))
save.image('workspace.RData')
spectrum(wbt$delta)
spectrum(wbt$delta)
sde <- spectrum(wbt$delta)
per <- 1/sde$freq[sde$spec == max(sde$spec)]
sde
spectrum(wbt$delta)
sde <- spectrum(wbt$delta)
per <- 1/sde$freq[sde$spec == max(sde$spec)]
per
sde <- spectrum(wbt$delta)
per <- 1/sde$freq[sde$spec == max(sde$spec)]
per
sde <- spectrum(wbt$delta)
per <- 1/sde$freq[sde$spec == sort(sde$spec, decreasing = T)[2]]
# This is the period calculated from the most likely frequency
per
sde <- spectrum(wbt$delta)
per <- 1/sde$freq[sde$spec == sort(sde$spec, decreasing = T)[3]]
# This is the period calculated from the most likely frequency
per
sde <- spectrum(wbt$delta)
per <- 1/sde$freq[sde$spec == sort(sde$spec, decreasing = T)[1:3]]
# This is the period calculated from the most likely frequency
per
quantile(wbt$delta,probs = c(0.1,0.9))
round(summary(wbt$delta),2)
quantile(wbt$delta,probs = c(0.1,0.9))
ggplot(wbt$delta) +
geom_histogram()
ggplot(wbt, aes(wbt$delta) +
ggplot(wbt, aes(wbt$delta)) +
geom_histogram()
ggplot(wbt, aes(wbt$delta)) +
ggplot(wbt, aes(delta)) +
geom_histogram()
ggplot(wbt, aes(delta)) +
geom_histogram(binwidth = 100)
ggplot(wbt, aes(delta)) +
geom_histogram(binwidth = 20)
ggplot(wbt, aes(delta)) +
geom_histogram(binwidth = 0.1)
ggplot(wbt, aes(delta)) +
geom_histogram(binwidth = 0.02)
ggplot(wbt, aes(delta)) +
geom_histogram(binwidth = 0.2)
quantile(wbt$delta, c(0,0.1,0.25,0.5,0.75,0.9,1))
ggplot(wbt, aes(delta)) +
geom_histogram(binwidth = 0.2)
round(quantile(wbt$delta, c(0,0.1,0.25,0.5,0.75,0.9,1)),2)
